// Code generated by protoc-gen-go-enum. DO NOT EDIT.
// source: ../fixture/bar.proto
// protoc-gen-go-enum version: v0.1.0

package fixture

import (
	"database/sql/driver"
	"entgo.io/ent/schema/field"
	go_enum "github.com/devtoolskits/protoc-gen-go-enum/pkg"
)

var (
	_ field.EnumValues   = (*FOO_BAR)(nil)
	_ field.ValueScanner = (*FOO_BAR)(nil)

	_ field.EnumValues   = (*BAR)(nil)
	_ field.ValueScanner = (*BAR)(nil)
)

// Values implements ent/schema/field.EnumValues
func (x FOO_BAR) Values() []string {
	return go_enum.EnumMembers(x)
}

// Value implements sql/driver.Valuer
func (x FOO_BAR) Value() (driver.Value, error) {
	return x.String(), nil
}

// Scan implements sql.Scanner
func (x *FOO_BAR) Scan(src any) error {
	var s string
	switch v := src.(type) {
	case nil:
		return nil
	case string:
		s = v
	case []uint8:
		s = string(v)
	}

	n, ok := FOO_BAR_value[s]
	if ok {
		*x = FOO_BAR(n)
	}
	return nil
}

// Values implements ent/schema/field.EnumValues
func (x BAR) Values() []string {
	return go_enum.EnumMembers(x)
}

// Value implements sql/driver.Valuer
func (x BAR) Value() (driver.Value, error) {
	return x.String(), nil
}

// Scan implements sql.Scanner
func (x *BAR) Scan(src any) error {
	var s string
	switch v := src.(type) {
	case nil:
		return nil
	case string:
		s = v
	case []uint8:
		s = string(v)
	}

	n, ok := BAR_value[s]
	if ok {
		*x = BAR(n)
	}
	return nil
}
